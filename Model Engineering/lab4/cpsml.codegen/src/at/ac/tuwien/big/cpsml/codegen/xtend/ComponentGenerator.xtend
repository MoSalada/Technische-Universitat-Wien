package at.ac.tuwien.big.cpsml.codegen.xtend

import cpsml.Sensor
import cpsml.Actuator
import cpsml.DataType
import com.ibm.icu.text.SearchIterator.ElementComparisonType

class ComponentGenerator {
	
	def formatDataType(DataType dt) {
		if (dt==DataType.STRING) {
			'''String'''
		} else if (dt==DataType.INT) {
			'''int'''
		} else if (dt==DataType.BOOLEAN) {
			'''boolean'''
		} else {
			'''void'''
		}
	}
	
	def dispatch searchForInt(Sensor comp) {
		var searching = true
		for (f : comp.function) {
			if (f.returnDataType==DataType.INT) {
				searching = false
			}
		}
		if (searching==false) {
			'''import java.util.Random;'''
		}
	}
	
	def dispatch searchForInt(Actuator comp) {
		var searching = true
		for (f : comp.function) {
			if (f.returnDataType==DataType.INT) {
				searching = false
			}
		}
		if (searching==false) {
			'''import java.util.Random;'''
		}
	}
	
	
	def dispatch generate(String packageName, Sensor comp)
	'''
	package Â«packageNameÂ».component;
	
	import java.util.List;
	Â«searchForInt(comp)Â»
	
	public class Â«comp.nameÂ» {
		
		private String name;
		private double frequency;
		private String topic;
		private int internalStepCount;
		
		public Â«comp.nameÂ»(String name) {
			this.name = name;
			this.frequency = 0.25;
			this.topic = "Â«comp.topicÂ»";
			this.internalStepCount = 0;
		}
		
		public String getName() {
			return name;
		}
		
		public String getTopic(){
			return this.topic;
		}
		
		Â«FOR f : comp.functionÂ»
		
		public Â«formatDataType(f.returnDataType)Â» Â«f.name.toFirstLowerÂ»(){
			System.out.println("    ðŸŸ£  Sensor timed function execution: " + this.name + " -> Â«f.name.toFirstLowerÂ»() returning type Â«f.returnDataTypeÂ»");
			Â«IF f.returnDataType==DataType.INTÂ»
				return new Random().nextInt(100);
			Â«ELSEIF f.returnDataType==DataType.STRINGÂ»
				return "_DummyString_";
			Â«ELSEÂ»
				return;
			Â«ENDIFÂ»
			}
		Â«ENDFORÂ»
		
		public void addMessageToNodeOutgoingCache(String topic, String msgContent, String recipient, List<String> msgOutCache) {
			msgOutCache.add(topic + "-" + recipient + "-" + msgContent);
		}
		
		public void step(List<String> msgOutCache) {
			if (this.internalStepCount % (1/frequency) == 0 ) {
				Â«FOR f : comp.functionÂ»
					addMessageToNodeOutgoingCache(this.topic, "" + this.Â«f.name.toFirstLowerÂ»(), "NONE" , msgOutCache);
				Â«ENDFORÂ»
				
			}
			this.internalStepCount++;
		}
	}
	
	'''
	
	def dispatch generate(String packageName, Actuator comp)
	'''
	package production.component;
	
	import java.util.Arrays;
	import java.util.Iterator;
	Â«searchForInt(comp)Â»
	
	public class Â«comp.nameÂ»{
		
		private String name;
		private int runs;
		private int ratedRuns;
		private String topic;
		
		public Â«comp.nameÂ»(String name) {
			this.name = name;
			this.runs = 70;
			this.ratedRuns = 100;
			this.topic = "Â«comp.topicÂ»";
		}
		
		Â«FOR f : comp.functionÂ»
				public Â«formatDataType(f.returnDataType)Â» Â«f.name.toFirstLowerÂ»(Â«FOR p : f.parameter SEPARATOR ","Â»Â«formatDataType(p.dataType)Â» Â«p.name.toFirstLowerÂ»Â«ENDFORÂ»){
					System.out.println("    ðŸ”µ  Actuator called function execution: " + this.name + " -> Â«f.name.toFirstLowerÂ»() returning type Â«f.returnDataTypeÂ»");
					Â«IF f.returnDataType==DataType.INTÂ»
						return new Random().nextInt(100);
					Â«ELSEIF f.returnDataType==DataType.STRINGÂ»
						return "_DummyString_";
					Â«ELSEÂ»
						return;
					Â«ENDIFÂ»
					}
			Â«IF f.parameter.length>0Â»
					public void Â«f.name.toFirstLowerÂ»(String[] input){
						Iterator<String> inputIter = Arrays.asList(input).iterator();
						
						Â«f.name.toFirstLowerÂ»( Integer.parseInt(inputIter.next()));
						return;
					}
			Â«ENDIFÂ»
		Â«ENDFORÂ»
			
		public String getName() {
			return name;
		}
		
		public String getTopic(){
			return this.topic;
		}
		
		public void step(){
		}
	}
	'''
}