/*
 * generated by Xtext 2.27.0
 */
package at.ac.tuwien.big.serializer;

import at.ac.tuwien.big.services.CpsmlGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class CpsmlSyntacticSequencer extends AbstractSyntacticSequencer {

	protected CpsmlGrammarAccess grammarAccess;
	protected AbstractElementAlias match_MessagingLink_MessageBrokerKeyword_6_q;
	protected AbstractElementAlias match_MessagingLink___TopicsKeyword_1_0_ColonKeyword_1_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (CpsmlGrammarAccess) access;
		match_MessagingLink_MessageBrokerKeyword_6_q = new TokenAlias(false, true, grammarAccess.getMessagingLinkAccess().getMessageBrokerKeyword_6());
		match_MessagingLink___TopicsKeyword_1_0_ColonKeyword_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getMessagingLinkAccess().getTopicsKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getMessagingLinkAccess().getColonKeyword_1_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_MessagingLink_MessageBrokerKeyword_6_q.equals(syntax))
				emit_MessagingLink_MessageBrokerKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MessagingLink___TopicsKeyword_1_0_ColonKeyword_1_1__q.equals(syntax))
				emit_MessagingLink___TopicsKeyword_1_0_ColonKeyword_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'messageBroker'?
	 *
	 * This ambiguous syntax occurs at:
	 *     topics+=EString ']' (ambiguity) messageBroker=[MessageBroker|EString]
	 
	 * </pre>
	 */
	protected void emit_MessagingLink_MessageBrokerKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('topics' ':')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '{' (ambiguity) '[' topics+=EString
	 
	 * </pre>
	 */
	protected void emit_MessagingLink___TopicsKeyword_1_0_ColonKeyword_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
