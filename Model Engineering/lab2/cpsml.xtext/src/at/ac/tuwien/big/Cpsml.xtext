// automatically generated by Xtext
grammar at.ac.tuwien.big.Cpsml with org.eclipse.xtext.common.Terminals

import "http://big.tuwien.ac.at/cpsml"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

CPS returns CPS:
	'CPS'
	name=EString
	'{'
		'environments' ':' '[' environment+=Environment (',' environment+=Environment)* ']'
		'messageBrokers' ':' '[' messageBroker+=MessageBroker (',' messageBroker+=MessageBroker)* ']'
		'controllers' ':' '[' controller+=Controller (',' controller+=Controller)* ']'
	'}'
	
;

Environment returns Environment:
	name=EString
	'{'
		'nodes' ':' '[' node+=Node (',' node+=Node)* ']'
	'}'
;

Node returns Node:
	name=EString '{'
		'health' ':' status=Status
		'Position' position=Position
		'components' ':' '[' component+=Component (',' component+=Component)* ']'
		'connectionModules' ':' '[' connectionModule+=ConnectionModule (',' connectionModule+=ConnectionModule)* ']'
		('subscribes' ':' '[' subscription+=MessagingLink (',' subscription+=MessagingLink)* ']')?
 		('publishes' ':' '[' publication+=MessagingLink (',' publication+=MessagingLink)* ']')?
	'}'
;

Component returns Component:
	Sensor | Actuator
;

Sensor returns Sensor:
	"Sensor"
	name=EString '{'
		'health' ':' status=Status
		'topic' ':' topic=EString
		'functions' ':' '[' function+=Function (',' function+=Function)* ']'
		('frequency' ':' frequency=EFloat)?
	'}'
;

Actuator returns Actuator:
	"Actuator"
	name=EString '{'
		'health' ':' status=Status
		'topic' ':' topic=EString
		('runs' ':' runs=EInt)?
		('ratedRuns' ':' ratedRuns=EInt)?
		'functions' ':' '[' function+=Function (',' function+=Function)* ']'
	'}'
;

Function returns Function:
	(returnDataType=DataType hasReturn?='::')? name=EString '(' (parameter+=Parameter (',' parameter+=Parameter)*)? ')'
;

Parameter returns Parameter:
	dataType=DataType '::' name=EString
;

ConnectableElement returns ConnectableElement:
	MessageBroker | Node
	//'Position' position=Position
	//'connectionModules' ':' '[' connectionModule+=ConnectionModule (',' connectionModule+=ConnectionModule)* ']'
;

MessageBroker returns MessageBroker:
	name=EString '{'
		'Position' position=Position
		'topics' ':' '[' topics+=EString (',' topics+=EString)* ']'
		'connectionModules' ':' '[' connectionModule+=ConnectionModule (',' connectionModule+=ConnectionModule)* ']'
	'}'	
;

ConnectionModule returns ConnectionModule:
	WiredModule | WirelessModule
;


WiredModule returns WiredModule:
	"WiredModule"
	name=EString '{'
		'supportedProtocols' ':' '[' supportedProtocols+=Protocol (',' supportedProtocols+=Protocol)* ']'
		('connect' '->' '[' connect+=[WiredModule|EString] (',' connect+=[WiredModule|EString])* ']')?
		('connectOpposite' '->' '[' connectOpposite+=[WiredModule|EString] (',' connectOpposite+=[WiredModule|EString])* ']')?
	'}'
	
;

WirelessModule returns WirelessModule:
	"WirelessModule"
	name=EString '{'
		'supportedProtocols' ':' '[' supportedProtocols+=Protocol (',' supportedProtocols+=Protocol)* ']'
		'range' ':' range=EFloat	
		('connect' '->' '[' connect+=[WirelessModule|EString] (',' connect+=[WirelessModule|EString])* ']')?
		('connectOpposite' '->' '[' connectOpposite+=[WirelessModule|EString] (',' connectOpposite+=[WirelessModule|EString])* ']')?
	'}'
	
	
;

Controller returns Controller:
	name=EString '{'
	
		'description' description=EString
		'topics' ':' '[' topics+=EString (',' topics+=EString)* ']'
		'subscribes' ':' '[' subscription+=MessagingLink (',' subscription+=MessagingLink)* ']'
 		'publishes' ':' '[' publication+=MessagingLink (',' publication+=MessagingLink)* ']'
	'}'
;


MessagingLink returns MessagingLink:
	
	'{'
		("topics" ":")? '[' topics+=EString (',' topics+=EString)* ']' ("messageBroker")?
		messageBroker=[MessageBroker|EString]
	'}'
;


Position returns Position:
	'{'
	'x' ':' x=EFloat
	'y' ':' y=EFloat
	'z' ':' z=EFloat
	'}'
;


enum DataType returns DataType:
				NULL = 'NULL' | BOOLEAN = 'BOOLEAN' | INT = 'INT' | STRING = 'STRING';
			
enum Status returns Status:
				GOOD = 'GOOD' | WARNING = 'WARNING' | CRITICAL = 'CRITICAL'
;
				
enum Protocol returns Protocol:
				DDS = 'DDS' | MQTT = 'MQTT' | SMQTT = 'SMQTT'
;
				
EString returns ecore::EString:
	STRING | ID;

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EInt returns ecore::EInt:
	'-'? INT;
